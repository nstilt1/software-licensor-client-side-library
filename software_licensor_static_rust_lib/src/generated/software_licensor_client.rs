// This file is @generated by prost-build.
/// Some ecdh key information. This key expires, but it is designed to be
/// used immediately after it is fetched by the client and swapped out with
/// a non-expiring one. The non-expiring one is meant to only be used once
/// as well, and the response from the server will contain a new public
/// key for the next request.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpiringEcdhKey {
    #[prost(bytes = "vec", tag = "1")]
    pub ecdh_key_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub ecdh_public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "3")]
    pub ecdh_public_key_pem: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpiringEcdsaKey {
    #[prost(bytes = "vec", tag = "1")]
    pub ecdsa_key_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub ecdsa_public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "4")]
    pub ecdsa_public_key_pem: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub expiration: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PubkeyRepo {
    /// randomly select an ECDH key from this list of keys.
    #[prost(message, repeated, tag = "1")]
    pub ecdh_keys: ::prost::alloc::vec::Vec<ExpiringEcdhKey>,
    #[prost(message, optional, tag = "2")]
    pub ecdsa_key: ::core::option::Option<ExpiringEcdsaKey>,
}
/// Some information that is necessary for the server to decrypt the request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DecryptInfo {
    /// the ecdh key used for decrypting the request
    #[prost(bytes = "vec", tag = "1")]
    pub server_ecdh_key_id: ::prost::alloc::vec::Vec<u8>,
    /// the `info` string for use in an HKDF for decrypting the request
    #[prost(bytes = "vec", tag = "3")]
    pub ecdh_info: ::prost::alloc::vec::Vec<u8>,
    /// the `salt` string for use in an HKDF for decrypting the request
    #[prost(bytes = "vec", tag = "4")]
    pub ecdh_salt: ::prost::alloc::vec::Vec<u8>,
    /// the client's ecdh pubkey for decrypting the request. This can
    /// be PEM encoded or DER encoded
    #[prost(oneof = "decrypt_info::ClientEcdhPubkey", tags = "5, 6")]
    pub client_ecdh_pubkey: ::core::option::Option<decrypt_info::ClientEcdhPubkey>,
}
/// Nested message and enum types in `DecryptInfo`.
pub mod decrypt_info {
    /// the client's ecdh pubkey for decrypting the request. This can
    /// be PEM encoded or DER encoded
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ClientEcdhPubkey {
        #[prost(string, tag = "5")]
        Pem(::prost::alloc::string::String),
        #[prost(bytes, tag = "6")]
        Der(::prost::alloc::vec::Vec<u8>),
    }
}
/// An API request to the Service.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Request {
    /// this value allows the client to decide which symmetric encryption
    /// algorithm will be used for the request and response. The server may
    /// reject the request if the value here is unacceptable.
    #[prost(string, tag = "1")]
    pub symmetric_algorithm: ::prost::alloc::string::String,
    /// the client's ID, or their desired prefix for their ID based on whether
    /// this is the initial handshake or not
    #[prost(string, tag = "2")]
    pub client_id: ::prost::alloc::string::String,
    /// Encrypted payload with the nonce prefixed to the encrypted data
    #[prost(bytes = "vec", tag = "3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    /// Information to decrypt the request
    #[prost(message, optional, tag = "4")]
    pub decryption_info: ::core::option::Option<DecryptInfo>,
    /// The ECDSA key ID that the server will use to sign its response
    #[prost(bytes = "vec", tag = "5")]
    pub server_ecdsa_key_id: ::prost::alloc::vec::Vec<u8>,
    /// the timestamp, in seconds since UNIX_EPOCH
    #[prost(uint64, tag = "6")]
    pub timestamp: u64,
}
/// Some ecdh key information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EcdhKey {
    #[prost(bytes = "vec", tag = "1")]
    pub ecdh_key_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub ecdh_public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "3")]
    pub ecdh_public_key_pem: ::prost::alloc::string::String,
}
/// An API response from the service.
///
/// To decrypt `data`, you will need to use the same ECDH private key
/// and ECDH public key that was used to encrypt the `data` field of
/// the request.
///
/// There will be a signature stored in the `Signature` header, which is
/// computed from a hash of this encoded structure.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Response {
    /// Encrypted payload with the nonce prefixed to the encrypted data
    #[prost(bytes = "vec", tag = "2")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    /// The protobuf-encoded key information for the client to use for their next
    /// request
    #[prost(message, optional, tag = "5")]
    pub next_ecdh_key: ::core::option::Option<EcdhKey>,
    /// the timestamp, in seconds since UNIX_EPOCH
    #[prost(uint64, tag = "6")]
    pub timestamp: u64,
}
/// The data required for license activation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LicenseActivationRequest {
    /// the license code. should look like:
    /// 1234-5678-90ab-cdef-1234
    /// or caps or with an offline code:
    /// 1234-5678-90ab-cdef-1234-offline-abcd
    #[prost(string, tag = "1")]
    pub license_code: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub machine_id: ::prost::alloc::string::String,
    /// hardware/simd statistics - this is an optional field
    #[prost(message, optional, tag = "4")]
    pub hardware_stats: ::core::option::Option<Stats>,
    /// the product ids that might need activation
    #[prost(string, repeated, tag = "5")]
    pub product_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Optional hardware statistics
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Stats {
    #[prost(string, tag = "1")]
    pub os_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub computer_name: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub is_64_bit: bool,
    #[prost(string, tag = "4")]
    pub users_language: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub display_language: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub num_logical_cores: u32,
    #[prost(uint32, tag = "7")]
    pub num_physical_cores: u32,
    #[prost(uint32, tag = "8")]
    pub cpu_freq_mhz: u32,
    #[prost(uint32, tag = "34")]
    pub ram_mb: u32,
    #[prost(uint32, tag = "35")]
    pub page_size: u32,
    #[prost(string, tag = "9")]
    pub cpu_vendor: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub cpu_model: ::prost::alloc::string::String,
    #[prost(bool, tag = "11")]
    pub has_mmx: bool,
    #[prost(bool, tag = "12")]
    pub has_3d_now: bool,
    #[prost(bool, tag = "13")]
    pub has_fma3: bool,
    #[prost(bool, tag = "14")]
    pub has_fma4: bool,
    #[prost(bool, tag = "15")]
    pub has_sse: bool,
    #[prost(bool, tag = "16")]
    pub has_sse2: bool,
    #[prost(bool, tag = "17")]
    pub has_sse3: bool,
    #[prost(bool, tag = "18")]
    pub has_ssse3: bool,
    #[prost(bool, tag = "19")]
    pub has_sse41: bool,
    #[prost(bool, tag = "20")]
    pub has_sse42: bool,
    #[prost(bool, tag = "21")]
    pub has_avx: bool,
    #[prost(bool, tag = "22")]
    pub has_avx2: bool,
    #[prost(bool, tag = "23")]
    pub has_avx512f: bool,
    #[prost(bool, tag = "24")]
    pub has_avx512bw: bool,
    #[prost(bool, tag = "25")]
    pub has_avx512cd: bool,
    #[prost(bool, tag = "26")]
    pub has_avx512dq: bool,
    #[prost(bool, tag = "27")]
    pub has_avx512er: bool,
    #[prost(bool, tag = "28")]
    pub has_avx512ifma: bool,
    #[prost(bool, tag = "29")]
    pub has_avx512pf: bool,
    #[prost(bool, tag = "30")]
    pub has_avx512vbmi: bool,
    #[prost(bool, tag = "31")]
    pub has_avx512vl: bool,
    #[prost(bool, tag = "32")]
    pub has_avx512vpopcntdq: bool,
    #[prost(bool, tag = "33")]
    pub has_neon: bool,
}
/// A license key file for a product
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LicenseKeyFile {
    #[prost(string, tag = "1")]
    pub product_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub product_version: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub license_code: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub license_type: ::prost::alloc::string::String,
    #[prost(string, tag = "20")]
    pub machine_id: ::prost::alloc::string::String,
    #[prost(uint64, tag = "21")]
    pub timestamp: u64,
    /// determines when the license expires or needs to be renewed
    #[prost(uint64, tag = "25")]
    pub expiration_timestamp: u64,
    /// determines when the client should attempt to renew the license
    /// expiration. Useful for allowing users to deactivate their machines
    /// that they've stopped using
    /// It is also useful for subscriptions and trials automatically renewing
    /// the expiration
    #[prost(uint64, tag = "26")]
    pub check_back_timestamp: u64,
    #[prost(string, tag = "30")]
    pub message: ::prost::alloc::string::String,
    /// a response code; valid codes are
    /// 1: success
    /// 2: no license found
    /// 4: reached the machine limit
    /// 8: trial ended
    /// 16: license no longer active
    /// 32: incorrect offline code
    /// 64: Offline codes are not allowed for this product
    /// 128: Invalid License Code
    /// 256: Machine Deactivated
    /// 512: Invalid License Type (should not happen)
    #[prost(uint32, tag = "31")]
    pub message_code: u32,
    /// the message to show if the license ever expires on the user
    #[prost(uint32, tag = "35")]
    pub post_expiration_error_code: u32,
}
/// The license activation response.
///
/// Note: the response could be of a different format—either a number as a string
/// or a text string
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LicenseActivationResponse {
    /// map of product ids to license key files
    #[prost(map = "string, message", tag = "1")]
    pub key_files: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        LicenseKeyFile,
    >,
    #[prost(string, tag = "6")]
    pub customer_first_name: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub customer_last_name: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub customer_email: ::prost::alloc::string::String,
    /// map of product ids to licensing errors
    #[prost(map = "string, uint32", tag = "2")]
    pub licensing_errors: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        u32,
    >,
    /// map of product ids to key file signature
    #[prost(map = "string, bytes", tag = "5")]
    pub key_file_signatures: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::vec::Vec<u8>,
    >,
}
/// A compact version of `EcdhKey` that has the `ecdh_public_key_pem` field
/// redacted to save space.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompactServerEcdhKey {
    #[prost(bytes = "vec", tag = "1")]
    pub ecdh_key_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub ecdh_public_key: ::prost::alloc::vec::Vec<u8>,
}
/// A compact version of `ExpiringEcdsaKey` that has the PEM field redacted to
/// save space.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompactServerEcdsaKey {
    #[prost(bytes = "vec", tag = "1")]
    pub ecdsa_key_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub ecdsa_public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "3")]
    pub expiration: u64,
}
/// This protobuf message will be stored on the client side.
///
/// Security notice: The user will be able to edit this locally stored file. In
/// order to crack this part of the DRM, they could edit the key files and the
/// signatures stored in the `LicenseActivationResponse`. While it is possible,
/// it is generally infeasible to brute force NIST P-384 signatures via this
/// method. Your code is more likely to be cracked by reverse engineering /
/// decompiling the software than it would be cracked with the P-384 signature.
///
/// And another note about cracking, if there is enough demand for your software,
/// it will be cracked. No amount of DRM will stop a determined person.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientSideDataStorage {
    #[prost(message, optional, tag = "1")]
    pub license_activation_response: ::core::option::Option<LicenseActivationResponse>,
    #[prost(message, optional, tag = "2")]
    pub next_server_ecdh_key: ::core::option::Option<CompactServerEcdhKey>,
    /// optional machine stats; will be None if the user doesn't consent
    #[prost(message, optional, tag = "3")]
    pub machine_stats: ::core::option::Option<Stats>,
    #[prost(string, tag = "4")]
    pub license_code: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub server_ecdsa_key: ::core::option::Option<CompactServerEcdsaKey>,
}
