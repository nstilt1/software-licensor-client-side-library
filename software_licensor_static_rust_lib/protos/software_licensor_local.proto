syntax = "proto3";

package software_licensor_client;

// Some ecdh key information. This key expires, but it is designed to be 
// used immediately after it is fetched by the client and swapped out with
// a non-expiring one. The non-expiring one is meant to only be used once 
// as well, and the response from the server will contain a new public 
// key for the next request.
message ExpiringEcdhKey {
    bytes ecdh_key_id = 1;
    bytes ecdh_public_key = 2;
    string ecdh_public_key_pem = 3;
}

message ExpiringEcdsaKey {
    bytes ecdsa_key_id = 1;
    bytes ecdsa_public_key = 2;
    string ecdsa_public_key_pem = 4;
    uint64 expiration = 3;
}

message PubkeyRepo {
    // randomly select an ECDH key from this list of keys.
    repeated ExpiringEcdhKey ecdh_keys = 1;
    ExpiringEcdsaKey ecdsa_key = 2;
}

// Some information that is necessary for the server to decrypt the request
message DecryptInfo {
    // the ecdh key used for decrypting the request
    bytes server_ecdh_key_id = 1;

    // the client's ecdh pubkey for decrypting the request. This can 
    // be PEM encoded or DER encoded
    oneof client_ecdh_pubkey {
        string pem = 5;
        bytes der = 6;
    }

    // the `info` string for use in an HKDF for decrypting the request
    bytes ecdh_info = 3;

    // the `salt` string for use in an HKDF for decrypting the request
    bytes ecdh_salt = 4;
}

// An API request to the Service.
message Request {
    // this value allows the client to decide which symmetric encryption 
    // algorithm will be used for the request and response. The server may 
    // reject the request if the value here is unacceptable.
    string symmetric_algorithm = 1;

    // the client's ID, or their desired prefix for their ID based on whether 
    // this is the initial handshake or not
    string client_id = 2;

    // Encrypted payload with the nonce prefixed to the encrypted data
    bytes data = 3;

    // Information to decrypt the request
    DecryptInfo decryption_info = 4;

    // The ECDSA key ID that the server will use to sign its response
    bytes server_ecdsa_key_id = 5;

    // the timestamp, in seconds since UNIX_EPOCH
    uint64 timestamp = 6;
}

// Some ecdh key information
message EcdhKey {
    bytes ecdh_key_id = 1;
    bytes ecdh_public_key = 2;
    string ecdh_public_key_pem = 3;
}

// An API response from the service.
//
// To decrypt `data`, you will need to use the same ECDH private key 
// and ECDH public key that was used to encrypt the `data` field of 
// the request.
// 
// There will be a signature stored in the `Signature` header, which is 
// computed from a hash of this encoded structure.
message Response {
    // Encrypted payload with the nonce prefixed to the encrypted data
    bytes data = 2;

    // The protobuf-encoded key information for the client to use for their next 
    // request
    EcdhKey next_ecdh_key = 5;

    // the timestamp, in seconds since UNIX_EPOCH
    uint64 timestamp = 6;
}

// The data required for license activation
message LicenseActivationRequest {
    // the license code. should look like:
    // 1234-5678-90ab-cdef-1234
    // or caps or with an offline code:
    // 1234-5678-90ab-cdef-1234-offline-abcd
    string license_code = 1;
    string machine_id = 2;
    // hardware/simd statistics - this is an optional field
    Stats hardware_stats = 4;
    // the product ids that might need activation
    repeated string product_ids = 5;
}

// Optional hardware statistics
message Stats {
    string os_name = 1;
    string computer_name = 2;
    bool is_64_bit = 3;
    string users_language = 4;
    string display_language = 5;
    uint32 num_logical_cores = 6;
    uint32 num_physical_cores = 7;
    uint32 cpu_freq_mhz = 8;
    uint32 ram_mb = 34;
    uint32 page_size = 35;
    string cpu_vendor = 9;
    string cpu_model = 10;
    bool has_mmx = 11;
    bool has_3d_now = 12;
    bool has_fma3 = 13;
    bool has_fma4 = 14;
    bool has_sse = 15;
    bool has_sse2 = 16;
    bool has_sse3 = 17;
    bool has_ssse3 = 18;
    bool has_sse41 = 19;
    bool has_sse42 = 20;
    bool has_avx = 21;
    bool has_avx2 = 22;
    bool has_avx512f = 23;
    bool has_avx512bw = 24;
    bool has_avx512cd = 25;
    bool has_avx512dq = 26;
    bool has_avx512er = 27;
    bool has_avx512ifma = 28;
    bool has_avx512pf = 29;
    bool has_avx512vbmi = 30;
    bool has_avx512vl = 31;
    bool has_avx512vpopcntdq = 32;
    bool has_neon = 33;
}

// A license key file for a product
message LicenseKeyFile {
    string product_id = 1;
    string product_version = 5;
    string license_code = 10;
    string license_type = 11;
    string machine_id = 20;
    uint64 timestamp = 21;
    // determines when the license expires or needs to be renewed
    uint64 expiration_timestamp = 25;
    // determines when the client should attempt to renew the license
    // expiration. Useful for allowing users to deactivate their machines 
    // that they've stopped using
    // It is also useful for subscriptions and trials automatically renewing
    // the expiration
    uint64 check_back_timestamp = 26;
    string message = 30;
    // a response code; valid codes are
    // 1: success
    // 2: no license found
    // 4: reached the machine limit
    // 8: trial ended
    // 16: license no longer active
    // 32: incorrect offline code
    // 64: Offline codes are not allowed for this product
    // 128: Invalid License Code
    // 256: Machine Deactivated
    // 512: Invalid License Type (should not happen)
    uint32 message_code = 31;
    // the message to show if the license ever expires on the user
    uint32 post_expiration_error_code = 35;
}

// The license activation response.
//
// Note: the response could be of a different formatâ€”either a number as a string
// or a text string
message LicenseActivationResponse {
    // map of product ids to license key files
    map<string, LicenseKeyFile> key_files = 1;
    string customer_first_name = 6;
    string customer_last_name = 7;
    string customer_email = 8;
    // map of product ids to licensing errors
    map<string, uint32> licensing_errors = 2;
    // map of product ids to key file signature
    map<string, bytes> key_file_signatures = 5;
}

// A compact version of `EcdhKey` that has the `ecdh_public_key_pem` field 
// redacted to save space.
message CompactServerEcdhKey {
    bytes ecdh_key_id = 1;
    bytes ecdh_public_key = 2;
}

// A compact version of `ExpiringEcdsaKey` that has the PEM field redacted to 
// save space.
message CompactServerEcdsaKey {
    bytes ecdsa_key_id = 1;
    bytes ecdsa_public_key = 2;
    uint64 expiration = 3;
}

// This protobuf message will be stored on the client side.
//
// Security notice: The user will be able to edit this locally stored file. In 
// order to crack this part of the DRM, they could edit the key files and the 
// signatures stored in the `LicenseActivationResponse`. While it is possible, 
// it is generally infeasible to brute force NIST P-384 signatures via this 
// method. Your code is more likely to be cracked by reverse engineering / 
// decompiling the software than it would be cracked with the P-384 signature.
//
// And another note about cracking, if there is enough demand for your software, 
// it will be cracked. No amount of DRM will stop a determined person.
message ClientSideDataStorage {
    LicenseActivationResponse license_activation_response = 1;
    CompactServerEcdhKey next_server_ecdh_key = 2;
    string license_code = 4;
    CompactServerEcdsaKey server_ecdsa_key = 5;
}

message ClientSideHwInfoStorage {
    // optional machine stats; will be None if the user doesn't consent
    Stats machine_stats = 1;
}